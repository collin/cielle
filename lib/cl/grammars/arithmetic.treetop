module CL
  grammar Arithmetic
    include CL::Whitespace

    rule arithmetic_expression
      additive
    end

    rule additive
      head:multitive
      tail:(
        space operator:additive_op
        space operand:multitive
      )* <BinaryOperation>
    end

    rule additive_op
      '+' {
        def apply(a, b)
          a + b
        end
      }
      /
      '-' {
        def apply(a, b)
          a - b
        end
      }
    end

    rule multitive
      head:primary
      tail:(
        space operator:multitive_op
        space operand:primary)
      )* <BinaryOperation>
    end

    rule multitive_op
      '*' {
        def apply(a, b)
          a * b
        end
      }
      /
      '/' {
        def apply(a, b)
          a / b
        end
      }
    end

    rule number
      float / integer
    end

    rule float
      integer "." integer {
        def eval(env={})
          text_value.to_f
        end
      }
    end

    rule integer
      ([1-9] [0-9]* / '0') {
        def eval(env={})
          text_value.to_i
        end
      }
    end

    rule primary
      number
      /
      '(' space expression:arithmetic_expression space ')' {
        def eval(env={})
          expression.eval(env)
        end
      }
    end
  end
end